Advice : 공통의 관심 사항 - 횡단 관심사항
	spring Advice : before
					after
					around
					afterReturning
					afterThrowing
					
--------------------------------------------
Aspect : 여러 객체에 공통으로 적용되는 관심사항
Advice : 공통 관심 기능을 언제 핵심 로직에 적용할지 정의 (ex : 메소드 호출 전에 공통 관심 기능을 호출한다)
JoinPoint : Advice가 적용될 시점/지점(메소드)
PointCut : joinpoint의 식별을 정의(어떤 메소드에….)
Weaving : Advice(Aspect)를 핵심 로직 코드에 삽입하는 것
Advisor : Advice를 지칭(spring aop에서만 사용하는 개념)
Proxy : 핵심 기능을 구현한 객체에 advice가 적용된 객체
---------------------------------------------
	
	스프링 AOP 에서는 메소드 실행 전후로만 advice 등록이 가능하다.
	
	
PointCut : Advice 적용할 메소드를 식별정의	


메소드 정의 구분
public List<String> 패키지.클래스 getUserPagingList(PageVo pageVo) throws Exception

접근제어자 : 스프링에서는 public 메소드만 허용, 옵션(생략 가능)
예외 : 생략 가능
execution(* kr.or.ddit..service.*(클래스).*(메소드(..인자))

ex)
kr.or.ddit.member.serivce
kr.or.ddit.board.serivce
kr.or.ddit.member.dao


	
==> service 패키지에 있는 모튼 클래스의 메서드가 실행될 때  --> pointCut
	Profiling(시간 측정) 
	
	

	
	
	
	
	
	
	